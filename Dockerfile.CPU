#
# Darknet NO GPU Dockerfile
# ADAPTED FROM @author Loreto Parisi (loretoparisi at gmail dot com)
# v1.0.0
#
# Copyright (c) 2017 Loreto Parisi - https://github.com/loretoparisi/docker
#
# Copyright (c) 2019 Steven Anderson - https://github.io/wanfuse123/

FROM amd64/ubuntu:18.04
ARG python_version_short=3
ARG python_version=3.6
ARG python_version_long=3.6.4
ARG cvVersion=3.4.6
ARG OPENCV_VERSION=3.4.6

WORKDIR /home/docker
RUN ls
RUN apt update -y


RUN cd /
RUN ln -sf /usr/share/zoneinfo/EST /etc/localtime


RUN apt update

RUN apt -y update && apt -y upgrade
RUN apt install -y software-properties-common 
RUN add-apt-repository 'deb http://security.ubuntu.com/ubuntu xenial-security main'

RUN apt -y remove x264 libx264-dev
RUN apt install -y     apt-utils \
                       autoconf \
                       automake \
                       build-essential \
                       build-essential \
                       build-essential \
                       build-essential \
                       bzip2 \
                       checkinstall \
                       checkinstall \
                       cmake \
                       cmake \
                       curl \
                       curl \
                       doxygen \
                       ffmpeg \
                       g++ \
                       gfortran \
                       gfortran \
                       git \
                       git \
                       git \
                       libatlas-base-dev \
                       libatlas-base-dev \
                       libavcodec-dev \
                       libavcodec-dev \
                       libavformat-dev \
                       libavformat-dev \
                       libavresample-dev \
                       libavutil-dev \
                       libbz2-dev \
                       libbz2-dev \
                       libbz2-dev \
                       libbz2-dev \
                       libdc1394-22-dev \
                       libdc1394-22-dev \
                       libeigen3-dev \
                       libfaac-dev \
                       libffi-dev \
                       libffi-dev \
                       libffi-dev \
                       libffi-dev \
                       libgflags-dev \
                       libglew-dev \
                       libgoogle-glog-dev \
                       libgphoto2-dev \
                       libgstreamer1.0 \
                       libgstreamer1.0-dev \
                       libgstreamer1.0-dev \
                       libgstreamer-plugins-base1.0-dev \
                       libgstreamer-plugins-base1.0-dev \
                       libgtk2.0-dev \
                       libgtk2.0-dev \
                       libhdf5-dev \
                       libjasper1 \
                       libjasper-dev \
                       libjasper-dev \
                       libjpeg8-dev \
                       libjpeg8-dev \
                       liblzma-dev \
                       liblzma-dev \
                       libmp3lame-dev \
                       libncurses5-dev \
                       libncurses5-dev \
                       libncursesw5-dev \
                       libncursesw5-dev \
                       libopencore-amrnb-dev \
                       libopencore-amrwb-dev \
                       libopencv-dev \
                       libpng-dev \
                       libpostproc-dev \
                       libprotobuf-dev \
                       libreadline-dev \
                       libreadline-dev \
                       libreadline-dev \
                       libreadline-dev \
                       libsm6 \
                       libsqlite3-dev \
                       libsqlite3-dev \
                       libsqlite3-dev \
                       libsqlite3-dev \
                       libssl-dev \
                       libssl-dev \
                       libssl-dev \
                       libssl-dev \
                       libswscale-dev \
                       libswscale-dev \
                       libtbb2 \
                       libtbb-dev \
                       libtbb-dev \
                       qt5-default \
                       libtheora-dev \
                       libtiff5-dev \
                       libtiff5-dev \
                       libtiff-dev \
                       libtool \
                       libv4l-dev \
                       libv4l-dev \
                       libvorbis-dev \
                       libxext6 \
                       libxine2-dev \
                       libxine2-dev \
                       libxrender1 \
                       libxvidcore-dev \
                       llvm \
                       llvm \
                       make \
                       pkg-config \
                       pkg-config \
                       pkg-config \
                       protobuf-compiler \
                       python3-dev \
                       python3-distutils \
                       python3-pip \
                       python3-pip \
                       python3-testresources \
                       python-dev \
                       python-openssl \
                       python-openssl \
                       python-pip \
                       python${python_version} \
                       python${python_version}-dev \
                       qt5-default \
                       tk-dev \
                       tk-dev \
                       unzip \
                       v4l-utils \
                       wget \
                       x264 \
                       xz-utils \
                       xz-utils \
                       yasm \
                       zlib1g-dev \
                       zlib1g-dev \
                       zlib1g-dev \
                       zlib1g-dev \
                       zlib1g-dev 


 
RUN cd /usr/include/linux
RUN ln -s -f ../libv4l1-videodev.h videodev.h


RUN git clone git://github.com/yyuu/pyenv.git .pyenv

ENV HOME  /home/docker
ENV PYENV_ROOT $HOME/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN pyenv install ${python_version_long} && pyenv local ${python_version_long} && pyenv rehash

RUN pip${python_version_short} install numpy xgboost scipy 

RUN cwd=/home/docker


RUN wget http://dlib.net/files/dlib-19.6.tar.bz2 && tar xvf dlib-19.6.tar.bz2
WORKDIR /home/docker/dlib-19.6/
RUN mkdir build
WORKDIR /home/docker/dlib-19.6/build
RUN cmake ..
RUN cmake --build . --config Release
RUN make install
RUN ldconfig
RUN pkg-config --libs --cflags dlib-1


WORKDIR /home/docker



RUN mkdir -p installation/OpenCV-"$cvVersion"
RUN  mkdir /home/docker/darknet
ENV PATH=/home/docker/darknet/OpenCV-"$cvVersion"-py3/bin:$PATH
RUN pip${python_version_short} install --upgrade pip
RUN pip${python_version_short} install --upgrade numpy
RUN pip${python_version_short} install --upgrade scipy
RUN pip${python_version_short} install --upgrade scikit-image
#RUN pip${python_version_short} install --upgrade dlib

# now install python libraries within this virtual environment
RUN pip${python_version_short} install wheel numpy scipy matplotlib scikit-image scikit-learn ipython 


WORKDIR /home/docker
RUN git clone https://github.com/opencv/opencv.git && git clone https://github.com/opencv/opencv_contrib.git
WORKDIR /home/docker/opencv
RUN git checkout $(OPENCV_VERSION)
WORKDIR /home/docker/opencv_contrib
RUN git checkout $(OPENCV_VERSION)
RUN mkdir build
WORKDIR /home/docker/opencv/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_PYTHON_SUPPORT=ON \
      -D CMAKE_INSTALL_PREFIX=/home/docker/installation/OpenCV-"$cvVersion" \
      -D OPENCV_EXTRA_MODULES_PATH=/home/docker/opencv_contrib/modules \
      -D BUILD_opencv_python3=$( [ ${python_version%%.*} -ge 3 ] && echo "ON" || echo "OFF" ) \
      -D BUILD_opencv_python2=$( [ ${python_version%%.*} -lt 3 ] && echo "ON" || echo "OFF" ) \
      -D PYTHON${python_version%%.*}_EXECUTABLE=$(which python${python_version}) \
      -D PYTHON_DEFAULT_EXECUTABLE=$(which python${python_version}) \
      -D BUILD_EXAMPLES=OFF \
      -D WITH_FFMPEG=ON \
      -D WITH_IPP=OFF \
      -D WITH_FFMPEG=ON \
      -D WITH_GSTREAMER=ON \
      -D WITH_V4L=ON \
      -D WITH_LIBV4L=ON \
      -D WITH_TBB=ON \
      -D WITH_QT=ON \
      -D WITH_EIGEN=OFF \
      -D WITH_OPENGL=ON ..


# Build, Test and Install

RUN    make -j$(nproc) 
RUN    make install
RUN    ldconfig 

WORKDIR /home/docker/darknet
RUN git clone https://github.com/mathieuorhan/darknet.git


WORKDIR /home/docker/darknet/darknet
RUN  sed -i 's/GPU=.*/GPU=0/' Makefile
RUN  sed -i 's/CUDNN=.*/CUDNN=0/' Makefile
RUN  sed -i'' -- 's/OPENCV=0/OPENCV=1/g' Makefile

RUN  make -j$(nproc)
RUN ldconfig

# cleaning
RUN     apt -y remove libatlas-base-dev \
                        libatlas-base-dev \
                        libavcodec-dev \
                        libavcodec-dev \
                        libavformat-dev \
                        libavformat-dev \
                        libavresample-dev \
                        libavutil-dev \
                        libbz2-dev \
                        libbz2-dev \
                        libbz2-dev \
                        libbz2-dev \
                        libdc1394-22-dev \
                        libdc1394-22-dev \
                        libeigen3-dev \
                        libeigen3-dev \
                        libfaac-dev \ 
                        libffi-dev \
                        libffi-dev \
                        libffi-dev \ 
                        libffi-dev \ 
                        libgflags-dev \
                        libglew-dev \
                        libgoogle-glog-dev  \
                        libgphoto2-dev \
                        libgstreamer1.0-dev \
                        libgstreamer1.0-dev \
                        libgstreamer-plugins-base1.0-dev \
                        libgstreamer-plugins-base1.0-dev \
                        libgtk2.0-dev \
                        libgtk2.0-dev \ 
                        libhdf5-dev \
                        libjasper-dev \
                        libjasper-dev \
                        libjpeg8-dev \
                        libjpeg8-dev \ 
                        liblzma-dev \
                        liblzma-dev \
                        libmp3lame-dev \
                        libncurses5-dev \ 
                        libncurses5-dev \ 
                        libncursesw5-dev \
                        libncursesw5-dev \
                        libopencore-amrnb-dev \
                        libopencore-amrwb-dev \
                        libopencv-dev \
                        libpng-dev \
                        libpostproc-dev \
                        libprotobuf-dev \
                        libreadline-dev \
                        libreadline-dev \
                        libreadline-dev \
                        libreadline-dev \
                        libsqlite3-dev \
                        libsqlite3-dev \
                        libsqlite3-dev \
                        libsqlite3-dev \
                        libssl-dev \
                        libssl-dev \
                        libssl-dev \
                        libssl-dev \
                        libswscale-dev \
                        libswscale-dev \
                        libtbb-dev \
                        libtbb-dev qt5-default \
                        libtheora-dev \
                        libtiff5-dev \
                        libtiff5-dev \
                        libtiff-dev \
                        libv4l-dev \
                        libv4l-dev \
                        libvorbis-dev \
                        libxine2-dev \
                        libxine2-dev \
                        libxvidcore-dev \
                        python3-dev \ 
                        python-dev \
                        python${python_version}-dev \
                        tk-dev \
                        tk-dev \
                        zlib1g-dev \
                        zlib1g-dev \
                        zlib1g-dev \
                        zlib1g-dev \ 
                        zlib1g-dev 

RUN     apt autoremove -y 

RUN     apt clean 




RUN apt install -y nano libopencv-highgui3.2
RUN sed -i 's/batch=.*/batch=1/' /home/docker/darknet/darknet/cfg/yolov3.cfg
RUN sed -i 's/subdivisions=.*/subdivisions=1/' /home/docker/darknet/darknet/cfg/yolov3.cfg
RUN sed -i 's/width=.*/width=600/' /home/docker/darknet/darknet/cfg/yolov3.cfg
RUN sed -i 's/height=.*/height=480/' /home/docker/darknet/darknet/cfg/yolov3.cfg
RUN apt install -y libcanberra-gtk-module libcanberra-gtk3-module
RUN export NO_AT_BRIDGE=1
RUN cp /home/docker/darknet/darknet/build/darknet/x64/data/coco.data /home/docker/darknet/darknet/data
# doesn't work for unknown reason*** " ./darknet detector demo ~/darknet/darknet/cfg/coco.data ~/darknet/darknet/cfg/yolo9000.cfg /home/docker/darknet/darknet/yolo9000.weights "

# ./darknet detector demo data/coco.data cfg/yolov3.cfg yolov3.weights -c 0

ENTRYPOINT []
CMD ["/bin/bash"]
