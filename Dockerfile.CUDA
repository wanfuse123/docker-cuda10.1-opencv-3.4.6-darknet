#
# Darkenet GPU Dockerfile
# ADAPTED FROM @author Loreto Parisi (loretoparisi at gmail dot com)
# v1.0.0
#
# Copyright (c) 2017 Loreto Parisi - https://github.com/loretoparisi/docker
#
# Copyright (c) 2019 Steven Anderson - https://github.io/wanfuse123/darknet-cuda

FROM nvidia/cuda:10.1-devel-ubuntu18.04

# *****************************
ARG python_version=3.6
ARG OPENCV_VERSION=3.4.4
ARG python_version_short=3
ARG python_version=3.6
ARG python_version_long=3.6.4
RUN ls
WORKDIR /root/darknet 
# Install all dependencies for OpenCV
RUN apt-get -y update

RUN apt-get -y install \
        python${python_version} \
        python${python_version}-dev \
        $( [ ${python_version%%.*} -ge 3 ] && echo "python${python_version%%.*}-distutils" ) \
        wget \
        unzip \
        cmake \
        libtbb2 \
        ffmpeg \
        gfortran \
        apt-utils \
        pkg-config \
        checkinstall \
        qt5-default \
        build-essential \
        libatlas-base-dev \
        libgtk2.0-dev \
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libswscale-dev \
        libjpeg8-dev \
        libpng-dev \
        libtiff5-dev \
        libdc1394-22-dev \
        libxine2-dev \
        libv4l-dev \
        libgstreamer1.0 \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev \
        libglew-dev \
        libpostproc-dev \
        libeigen3-dev \
        libtbb-dev \
        zlib1g-dev \
        libsm6 \
        libxext6 \
        libxrender1 \
        python-dev \
        python3-dev \
        python3-pip \
        python3-testresources \
        freeglut3 \ 
        freeglut3-dev \
        libxi-dev \
        libxmu-dev


RUN ln -sf /usr/share/zoneinfo/EST /etc/localtime

# Install CUDNN
RUN wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/libcudnn7_7.5.0.56-1+cuda10.1_amd64.deb
RUN dpkg -i libcudnn7_7.5.0.56-1+cuda10.1_amd64.deb
RUN apt-get -y update
RUN apt install -y libcudnn7

RUN apt update -y
RUN apt install -y cuda-samples-10.1

# install python dependencies
RUN    sysctl -w net.ipv4.ip_forward=1
RUN    wget https://bootstrap.pypa.io/get-pip.py --progress=bar:force:noscroll
RUN    python${python_version} get-pip.py
RUN    pip${python_version} install numpy 
RUN    pip${python_version} install xgboost
RUN    pip${python_version} install scipy
# Install OpenCV
RUN    wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip -O opencv.zip --progress=bar:force:noscroll
RUN    unzip -q opencv.zip
RUN    mv opencv-$OPENCV_VERSION opencv
RUN    rm opencv.zip
RUN    wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip -O opencv_contrib.zip --progress=bar:force:noscroll
RUN    unzip -q opencv_contrib.zip
RUN    mv opencv_contrib-$OPENCV_VERSION opencv_contrib
RUN    rm opencv_contrib.zip 


# Set the default python and install PIP packages
RUN    update-alternatives --install /usr/bin/python${python_version%%.*} python${python_version%%.*} /usr/bin/python${python_version} 1
RUN    update-alternatives --install /usr/bin/python python /usr/bin/python${python_version} 1
RUN    wget https://bootstrap.pypa.io/get-pip.py --progress=bar:force:noscroll
RUN    python get-pip.py
RUN    rm get-pip.py
RUN    pip install opencv-python opencv-contrib-python 

# Call default command.
RUN    pip --version
RUN    python -c "import cv2 ; print(cv2.__version__)"

# Prepare build
RUN    mkdir -p /root/darknet/opencv/build
RUN    mkdir -p /home/docker/installation
WORKDIR /root/darknet/opencv/build
RUN    cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_PYTHON_SUPPORT=ON \
      -D CMAKE_INSTALL_PREFIX=/home/docker/installation \
      -D BUILD_opencv_cvv=OFF \
      -D WITH_CUDA=ON \
      -D ENABLE_FAST_MATH=1 \
      -D CUDA_FAST_MATH=1 \
      -D WITH_CUBLAS=1 \
      -D OPENCV_EXTRA_MODULES_PATH=/root/darknet/opencv_contrib/modules \
      -D BUILD_opencv_python3=$( [ ${python_version%%.*} -ge 3 ] && echo "ON" || echo "OFF" ) \
      -D BUILD_opencv_python2=$( [ ${python_version%%.*} -lt 3 ] && echo "ON" || echo "OFF" ) \
      -D PYTHON${python_version%%.*}_EXECUTABLE=$(which python${python_version}) \
      -D PYTHON_DEFAULT_EXECUTABLE=$(which python${python_version}) \
      -D BUILD_EXAMPLES=ON \
      -D WITH_IPP=OFF \
      -D WITH_FFMPEG=ON \
      -D WITH_GSTREAMER=ON \
      -D WITH_V4L=ON \
      -D WITH_LIBV4L=ON \
      -D WITH_TBB=ON \
      -D WITH_QT=ON \
      -D WITH_OPENGL=ON ..


# Build, Test and Install
RUN    make -j$(nproc) 
RUN    make install
RUN    ldconfig 

WORKDIR /root/darknet 

# working directory
WORKDIR /root/darknet

RUN export PATH=/usr/local/cuda-10.1/bin:/usr/local/cuda-10.1/lib64:/usr/local/cuda-10.1/NsightCompute-1.0${PATH:+:${PATH}}
RUN export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64$\{LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
RUN apt-key adv --fetch-keys  http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/7fa2af80.pub
RUN bash -c 'echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64 /" > /etc/apt/sources.list.d/cuda.list'

RUN apt update -y && apt install -y cuda-core-10.1 libcudnn7-dev libcudnn7

RUN export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
RUN export PATH=/usr/local/cuda-10.1/bin${PATH:+:${PATH}}$ 
RUN export PATH=$PATH:/usr/local/cuda-10.1/bin
RUN export CUDADIR=/usr/local/cuda-10.1

RUN python -m pip install --upgrade pip
RUN apt install -y git
RUN git clone https://github.com/mathieuorhan/darknet.git
WORKDIR /root/darknet/darknet
RUN apt install -y libopencv-dev
RUN sed -i 's/GPU=.*/GPU=1/' Makefile
RUN sed -i'' -- 's/OPENCV=0/OPENCV=1/g' Makefile
RUN sed -i '232s/cudaThreadSynchronize/cudaDeviceSynchronize/' src/gemm.c

RUN make -j$(nproc) 

RUN ln -s /usr/bin/gcc-7  /usr/local/cuda-10.1/bin/gcc
RUN apt install -y pkg-config libopencv-dev
RUN export NVCC=/usr/local/cuda-10.1/bin/nvcc

RUN pip install pycuda
RUN python -m pip install --user scikit-cuda



RUN ldconfig

# cleaning
#RUN    apt-get -y remove \
#        unzip \
#        cmake \
#        gfortran \
#        apt-utils \
#        pkg-config \
#        checkinstall \
#        build-essential \
#        libatlas-base-dev \
#        libgtk2.0-dev \
#        libavcodec-dev \
#        libavformat-dev \
#        libavutil-dev \
#        libswscale-dev \
#        libjpeg8-dev \
#        libpng12-dev \
#        libtiff5-dev \
#        libdc1394-22-dev \
#        libxine2-dev \
#        libv4l-dev \
#        libgstreamer1.0-dev \
#        libgstreamer-plugins-base1.0-dev \
#        libglew-dev \
#        libpostproc-dev \
#        libeigen3-dev \
#        libtbb-dev \
#        zlib1g-dev \
#        g++

#RUN    apt-get autoremove -y 

#RUN    apt-get clean 
WORKDIR /root/darknet

#RUN    rm -rf opencv opencv_contrib /var/lib/apt/lists/*
RUN apt install -y nano libopencv-highgui3.2
RUN sed -i 's/batch=.*/batch=1/' /root/darknet/darknet/cfg/yolov3.cfg
RUN sed -i 's/subdivisions=.*/subdivisions=1/' /root/darknet/darknet/cfg/yolov3.cfg
RUN sed -i 's/width=.*/width=600/' /root/darknet/darknet/cfg/yolov3.cfg
RUN sed -i 's/height=.*/height=480/' /root/darknet/darknet/cfg/yolov3.cfg
RUN apt install -y libcanberra-gtk-module libcanberra-gtk3-module
RUN export NO_AT_BRIDGE=1
RUN cp /root/darknet/darknet/build/darknet/x64/data/coco.data /root/darknet/darknet/data/
# works if copyout has cfgs and weights  ./darknet detector demo data/coco.data cfg/yolov3.cfg /home/docker/copyout/yolov3.weights -c 0
# " ./darknet detector demo ~/darknet/darknet/cfg/coco.data ~/darknet/darknet/cfg/yolo9000.cfg /root/darknet/darknet/yolo9000.weights "

ENTRYPOINT []
CMD ["/bin/bash"]

